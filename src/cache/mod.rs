//! A stable on-disk cache format for ProGuard mapping files.
//!
//! # Structure
//! A [`ProguardCache`] file comprises the following parts:
//! * A [header](ProguardCache::header), containing the version number, the numbers of class, member, and
//!   member-by-params entries, and the length of the string section;
//! * A [list](ProguardCache::classes) of [`Class`](raw::Class) entries;
//! * A [list](ProguardCache::members) of [`Member`](raw::Member) entries;
//! * Another [list](Proguard_cache::members_by_params) of `Member` entries, sorted
//!   by parameter strings;
//! * A [string section](ProguardCache::string_bytes) in which class names, method
//!   names, &c. are collected. Whenever a class or member entry references a string,
//!   it is by offset into this section.
//!
//! ## Class entries
//! A class entry contains an obfuscated and an original name, optionally a file name,
//! and an offset and length for the class's associated records in the `members`
//! and `members_by_params` section, respectively.
//!
//! Class entries are sorted by obfuscated name.
//!
//! ## Member entries
//! A member entry always contains an obfuscated and an original method name, a start
//! and end line (1- based and inclusive), and a params string.
//! It may also contain an original class name,
//! original file name, and original start and end line.
//!
//! Member entries in `members` are sorted by the class they belong to, then by
//! obfuscated method name, and finally by the order in which they were encountered
//! in the original proguard file.
//!
//! Member entries in `members_by_params` are sorted by the class they belong to,
//! then by obfuscated method name, then by params string, and finally
//! by the order in which they were encountered in the original proguard file.

mod debug;
mod raw;

use std::cmp::Ordering;
use std::fmt::Write;

use thiserror::Error;

use crate::mapper::{format_cause, format_frames, format_throwable};
use crate::{java, stacktrace, DeobfuscatedSignature, StackFrame, StackTrace, Throwable};

pub use raw::ProguardCache;

/// Errors returned while loading/parsing a serialized [`ProguardCache`].
///
/// After a `ProguardCache` was successfully parsed via [`ProguardCache::parse`], an Error that occurs during
/// access of any data indicates either corruption of the serialized file, or a bug in the
/// converter/serializer.
#[derive(Debug, Error, Clone, Copy, PartialEq, Eq)]
#[non_exhaustive]
pub enum CacheErrorKind {
    /// The file was generated by a system with different endianness.
    #[error("endianness mismatch")]
    WrongEndianness,
    /// The file magic does not match.
    #[error("wrong format magic")]
    WrongFormat,
    /// The format version in the header is wrong/unknown.
    #[error("unknown ProguardCache version")]
    WrongVersion,
    /// Header could not be parsed from the cache file.
    #[error("could not read header")]
    InvalidHeader,
    /// Class data could not be parsed from the cache file.
    #[error("could not read classes")]
    InvalidClasses,
    /// Member data could not be parsed from the cache file.
    #[error("could not read members")]
    InvalidMembers,
    /// The header claimed an incorrect number of string bytes.
    #[error("expected {expected} string bytes, found {found}")]
    UnexpectedStringBytes {
        /// Expected number of string bytes.
        expected: usize,
        /// Number of string bytes actually found in the cache file.
        found: usize,
    },
}

/// An error returned when handling a [`ProguardCache`].
#[derive(Debug, Error)]
#[error("{kind}")]
pub struct CacheError {
    pub(crate) kind: CacheErrorKind,
    #[source]
    pub(crate) source: Option<Box<dyn std::error::Error + Send + Sync + 'static>>,
}

impl CacheError {
    /// Returns the corresponding [`ErrorKind`] for this error.
    pub fn kind(&self) -> CacheErrorKind {
        self.kind
    }
}

impl From<CacheErrorKind> for CacheError {
    fn from(kind: CacheErrorKind) -> Self {
        Self { kind, source: None }
    }
}

impl<'data> ProguardCache<'data> {
    fn get_class(&self, name: &str) -> Option<&raw::Class> {
        let idx = self
            .classes
            .binary_search_by(|c| {
                let Ok(obfuscated) = self.read_string(c.obfuscated_name_offset) else {
                    return Ordering::Greater;
                };
                obfuscated.cmp(name)
            })
            .ok()?;

        self.classes.get(idx)
    }

    fn get_class_members(&self, class: &raw::Class) -> Option<&'data [raw::Member]> {
        let raw::Class {
            members_offset,
            members_len,
            ..
        } = class;
        let start = *members_offset as usize;
        let end = start.checked_add(*members_len as usize)?;

        self.members.get(start..end)
    }

    fn get_class_members_by_params(&self, class: &raw::Class) -> Option<&'data [raw::Member]> {
        let raw::Class {
            members_by_params_offset,
            members_by_params_len,
            ..
        } = class;
        let start = *members_by_params_offset as usize;
        let end = start.checked_add(*members_by_params_len as usize)?;

        self.members_by_params.get(start..end)
    }

    /// Remaps an obfuscated Class.
    ///
    /// This works on the fully-qualified name of the class, with its complete
    /// module prefix.
    ///
    /// # Examples
    ///
    /// ```
    /// use proguard::{ProguardMapping, ProguardCache};
    /// let mapping = ProguardMapping::new(br#"android.arch.core.executor.ArchTaskExecutor -> a.a.a.a.c:"#);
    /// let mut cache = Vec::new();
    /// ProguardCache::write(&mapping, &mut cache).unwrap();
    /// let cache = ProguardCache::parse(&cache).unwrap();
    ///
    /// let mapped = cache.remap_class("a.a.a.a.c");
    /// assert_eq!(mapped, Some("android.arch.core.executor.ArchTaskExecutor"));
    /// ```
    pub fn remap_class(&self, class: &str) -> Option<&'data str> {
        let class = self.get_class(class)?;
        self.read_string(class.original_name_offset).ok()
    }

    /// Remaps an obfuscated Class Method.
    ///
    /// The `class` argument has to be the fully-qualified obfuscated name of the
    /// class, with its complete module prefix.
    ///
    /// If the `method` can be resolved unambiguously, it will be returned
    /// alongside the remapped `class`, otherwise `None` is being returned.
    pub fn remap_method(&self, class: &str, method: &str) -> Option<(&'data str, &'data str)> {
        let class = self.get_class(class)?;
        let members = self.get_class_members(class)?;

        let matching_members = Self::find_range_by_binary_search(members, |m| {
            let Ok(obfuscated_name) = self.read_string(m.obfuscated_name_offset) else {
                return Ordering::Greater;
            };

            obfuscated_name.cmp(method)
        })?;
        let mut iter = matching_members.iter();
        let first = iter.next()?;

        // We conservatively check that all the mappings point to the same method,
        // as we donâ€™t have line numbers to disambiguate.
        // We could potentially skip inlined functions here, but lets rather be conservative.
        let all_matching =
            iter.all(|member| member.original_name_offset == first.original_name_offset);

        if !all_matching {
            return None;
        }

        let original_class = self.read_string(class.original_name_offset).ok()?;
        let original_method = self.read_string(first.original_name_offset).ok()?;

        Some((original_class, original_method))
    }

    /// Remaps a single Stackframe.
    ///
    /// Returns zero or more [`StackFrame`]s, based on the information in
    /// the proguard mapping. This can return more than one frame in the case
    /// of inlined functions. In that case, frames are sorted top to bottom.
    pub fn remap_frame<'r: 'data>(
        &'r self,
        frame: &StackFrame<'data>,
    ) -> RemappedFrameIter<'r, 'data> {
        let Some(class) = self.get_class(frame.class) else {
            return RemappedFrameIter::empty();
        };

        let mut frame = frame.clone();
        let Ok(original_class) = self.read_string(class.original_name_offset) else {
            return RemappedFrameIter::empty();
        };

        frame.class = original_class;

        // The following if and else cases are very similar. The only difference
        // is that if the frame contains parameter information, we use it in
        // our comparisons (in addition to the method name).
        if let Some(frame_params) = frame.parameters {
            let Some(members) = self.get_class_members_by_params(class) else {
                return RemappedFrameIter::empty();
            };

            // Find the range of members that have the same method name and params
            // as the frame.
            let Some(members) = Self::find_range_by_binary_search(members, |m| {
                let Ok(obfuscated_name) = self.read_string(m.obfuscated_name_offset) else {
                    return Ordering::Greater;
                };

                let params = self.read_string(m.params_offset).unwrap_or_default();

                (obfuscated_name, params).cmp(&(frame.method, frame_params))
            }) else {
                return RemappedFrameIter::empty();
            };
            RemappedFrameIter::members(self, frame, members.iter())
        } else {
            let Some(members) = self.get_class_members(class) else {
                return RemappedFrameIter::empty();
            };

            // Find the range of members that have the same method name
            // as the frame.
            let Some(members) = Self::find_range_by_binary_search(members, |m| {
                let Ok(obfuscated_name) = self.read_string(m.obfuscated_name_offset) else {
                    return Ordering::Greater;
                };

                obfuscated_name.cmp(frame.method)
            }) else {
                return RemappedFrameIter::empty();
            };

            RemappedFrameIter::members(self, frame, members.iter())
        }
    }

    /// Finds the range of elements of `members` for which `f(m) == Ordering::Equal`.
    ///
    /// This works by first binary searching for any element fitting the criteria
    /// and then linearly searching foraward and backward from that one to find
    /// the exact range.
    ///
    /// Obviously this only works if the criteria are consistent with the order
    /// of `members`.
    fn find_range_by_binary_search<F>(members: &[raw::Member], f: F) -> Option<&[raw::Member]>
    where
        F: Fn(&raw::Member) -> std::cmp::Ordering,
    {
        // Find any member fitting the criteria by binary search.
        let mid = members.binary_search_by(&f).ok()?;
        let matches_not = |m: &raw::Member| f(m).is_ne();
        // Search backwards from `mid` for a member that doesn't match the
        // criteria. The one after it must be the first one that does.
        let start = members[..mid]
            .iter()
            .rposition(matches_not)
            .map_or(0, |idx| idx + 1);

        // Search forwards from `mid` for a member that doesn't match the
        // criteria. The one before it must be the last one that does.
        let end = members[mid..]
            .iter()
            .position(matches_not)
            .map_or(members.len(), |idx| idx + mid);

        members.get(start..end)
    }

    /// Remaps a throwable which is the first line of a full stacktrace.
    ///
    /// # Example
    ///
    /// ```
    /// use proguard::{ProguardMapping, ProguardCache, Throwable};
    ///
    /// let mapping = ProguardMapping::new(b"com.example.Mapper -> a.b:");
    /// let mut cache = Vec::new();
    /// ProguardCache::write(&mapping, &mut cache).unwrap();
    /// let cache = ProguardCache::parse(&cache).unwrap();
    ///
    /// let throwable = Throwable::try_parse(b"a.b: Crash").unwrap();
    /// let mapped = cache.remap_throwable(&throwable);
    ///
    /// assert_eq!(
    ///     Some(Throwable::with_message("com.example.Mapper", "Crash")),
    ///     mapped
    /// );
    /// ```
    pub fn remap_throwable<'a>(&'a self, throwable: &Throwable<'a>) -> Option<Throwable<'a>> {
        self.remap_class(throwable.class).map(|class| Throwable {
            class,
            message: throwable.message,
        })
    }

    /// Remaps a complete Java StackTrace, similar to [`Self::remap_stacktrace_typed`] but instead works on
    /// strings as input and output.
    pub fn remap_stacktrace(&self, input: &str) -> Result<String, std::fmt::Error> {
        let mut stacktrace = String::new();
        let mut lines = input.lines();

        if let Some(line) = lines.next() {
            match stacktrace::parse_throwable(line) {
                None => match stacktrace::parse_frame(line) {
                    None => writeln!(&mut stacktrace, "{}", line)?,
                    Some(frame) => format_frames(&mut stacktrace, line, self.remap_frame(&frame))?,
                },
                Some(throwable) => {
                    format_throwable(&mut stacktrace, line, self.remap_throwable(&throwable))?
                }
            }
        }

        for line in lines {
            match stacktrace::parse_frame(line) {
                None => match line
                    .strip_prefix("Caused by: ")
                    .and_then(stacktrace::parse_throwable)
                {
                    None => writeln!(&mut stacktrace, "{}", line)?,
                    Some(cause) => {
                        format_cause(&mut stacktrace, line, self.remap_throwable(&cause))?
                    }
                },
                Some(frame) => format_frames(&mut stacktrace, line, self.remap_frame(&frame))?,
            }
        }
        Ok(stacktrace)
    }

    /// Remaps a complete Java StackTrace.
    pub fn remap_stacktrace_typed<'a>(&'a self, trace: &StackTrace<'a>) -> StackTrace<'a> {
        let exception = trace
            .exception
            .as_ref()
            .and_then(|t| self.remap_throwable(t));

        let frames =
            trace
                .frames
                .iter()
                .fold(Vec::with_capacity(trace.frames.len()), |mut frames, f| {
                    let mut peek_frames = self.remap_frame(f).peekable();
                    if peek_frames.peek().is_some() {
                        frames.extend(peek_frames);
                    } else {
                        frames.push(f.clone());
                    }

                    frames
                });

        let cause = trace
            .cause
            .as_ref()
            .map(|c| Box::new(self.remap_stacktrace_typed(c)));

        StackTrace {
            exception,
            frames,
            cause,
        }
    }

    /// returns a tuple where the first element is the list of the function
    /// parameters and the second one is the return type
    pub fn deobfuscate_signature(&self, signature: &str) -> Option<DeobfuscatedSignature> {
        java::deobfuscate_bytecode_signature_cache(signature, self).map(DeobfuscatedSignature::new)
    }
}

/// An iterator over remapped stack frames.
///
/// This is returned by [`ProguardCache::remap_frame`].
#[derive(Clone, Debug)]
pub struct RemappedFrameIter<'r, 'data> {
    inner: Option<(
        &'r ProguardCache<'data>,
        StackFrame<'data>,
        std::slice::Iter<'data, raw::Member>,
    )>,
}

impl<'data> RemappedFrameIter<'_, 'data> {
    fn empty() -> Self {
        Self { inner: None }
    }

    fn members(
        cache: &'data ProguardCache<'data>,
        frame: StackFrame<'data>,
        members: std::slice::Iter<'data, raw::Member>,
    ) -> Self {
        Self {
            inner: Some((cache, frame, members)),
        }
    }
}

impl<'data> Iterator for RemappedFrameIter<'_, 'data> {
    type Item = StackFrame<'data>;

    fn next(&mut self) -> Option<Self::Item> {
        let (cache, frame, members) = self.inner.as_mut()?;
        if frame.parameters.is_none() {
            iterate_with_lines(cache, frame, members)
        } else {
            iterate_without_lines(cache, frame, members)
        }
    }
}

fn iterate_with_lines<'a>(
    cache: &ProguardCache<'a>,
    frame: &mut StackFrame<'a>,
    members: &mut std::slice::Iter<'_, raw::Member>,
) -> Option<StackFrame<'a>> {
    for member in members {
        // skip any members which do not match our frames line
        if member.endline > 0
            && (frame.line < member.startline as usize || frame.line > member.endline as usize)
        {
            continue;
        }
        // parents of inlined frames donâ€™t have an `endline`, and
        // the top inlined frame need to be correctly offset.
        let line = if member.original_endline == u32::MAX
            || member.original_endline == member.original_startline
        {
            member.original_startline as usize
        } else {
            member.original_startline as usize + frame.line - member.startline as usize
        };

        let class = cache
            .read_string(member.original_class_offset)
            .unwrap_or(frame.class);

        let file = if member.original_file_offset != u32::MAX {
            let Ok(file_name) = cache.read_string(member.original_file_offset) else {
                continue;
            };

            if file_name == "R8$$SyntheticClass" {
                extract_class_name(class)
            } else {
                Some(file_name)
            }
        } else if member.original_class_offset != u32::MAX {
            // when an inlined function is from a foreign class, we
            // donâ€™t know the file it is defined in.
            None
        } else {
            frame.file
        };

        let Ok(method) = cache.read_string(member.original_name_offset) else {
            continue;
        };

        return Some(StackFrame {
            class,
            method,
            file,
            line,
            parameters: frame.parameters,
        });
    }
    None
}

fn iterate_without_lines<'a>(
    cache: &ProguardCache<'a>,
    frame: &mut StackFrame<'a>,
    members: &mut std::slice::Iter<'_, raw::Member>,
) -> Option<StackFrame<'a>> {
    let member = members.next()?;

    let class = cache
        .read_string(member.original_class_offset)
        .unwrap_or(frame.class);

    let method = cache.read_string(member.original_name_offset).ok()?;

    Some(StackFrame {
        class,
        method,
        file: None,
        line: 0,
        parameters: frame.parameters,
    })
}

fn extract_class_name(full_path: &str) -> Option<&str> {
    let after_last_period = full_path.split('.').last()?;
    // If the class is an inner class, we need to extract the outer class name
    after_last_period.split('$').next()
}

#[cfg(test)]
mod tests {
    use crate::{ProguardMapping, StackFrame, StackTrace, Throwable};

    use super::raw::ProguardCache;

    #[test]
    fn stacktrace() {
        let mapping = "\
com.example.MainFragment$EngineFailureException -> com.example.MainFragment$d:
com.example.MainFragment$RocketException -> com.example.MainFragment$e:
com.example.MainFragment$onActivityCreated$4 -> com.example.MainFragment$g:
    1:1:void com.example.MainFragment$Rocket.startEngines():90:90 -> onClick
    1:1:void com.example.MainFragment$Rocket.fly():83 -> onClick
    1:1:void onClick(android.view.View):65 -> onClick
    2:2:void com.example.MainFragment$Rocket.fly():85:85 -> onClick
    2:2:void onClick(android.view.View):65 -> onClick
    ";
        let stacktrace = StackTrace {
            exception: Some(Throwable {
                class: "com.example.MainFragment$e",
                message: Some("Crash!"),
            }),
            frames: vec![
                StackFrame {
                    class: "com.example.MainFragment$g",
                    method: "onClick",
                    line: 2,
                    file: Some("SourceFile"),
                    parameters: None,
                },
                StackFrame {
                    class: "android.view.View",
                    method: "performClick",
                    line: 7393,
                    file: Some("View.java"),
                    parameters: None,
                },
            ],
            cause: Some(Box::new(StackTrace {
                exception: Some(Throwable {
                    class: "com.example.MainFragment$d",
                    message: Some("Engines overheating"),
                }),
                frames: vec![StackFrame {
                    class: "com.example.MainFragment$g",
                    method: "onClick",
                    line: 1,
                    file: Some("SourceFile"),
                    parameters: None,
                }],
                cause: None,
            })),
        };
        let expect = "\
com.example.MainFragment$RocketException: Crash!
    at com.example.MainFragment$Rocket.fly(<unknown>:85)
    at com.example.MainFragment$onActivityCreated$4.onClick(SourceFile:65)
    at android.view.View.performClick(View.java:7393)
Caused by: com.example.MainFragment$EngineFailureException: Engines overheating
    at com.example.MainFragment$Rocket.startEngines(<unknown>:90)
    at com.example.MainFragment$Rocket.fly(<unknown>:83)
    at com.example.MainFragment$onActivityCreated$4.onClick(SourceFile:65)\n";

        let mapping = ProguardMapping::new(mapping.as_bytes());
        let mut cache = Vec::new();
        ProguardCache::write(&mapping, &mut cache).unwrap();

        let cache = ProguardCache::parse(&cache).unwrap();

        cache.test();

        assert_eq!(
            cache.remap_stacktrace_typed(&stacktrace).to_string(),
            expect,
        );
    }

    #[test]
    fn stacktrace_str() {
        let mapping = "\
com.example.MainFragment$EngineFailureException -> com.example.MainFragment$d:
com.example.MainFragment$RocketException -> com.example.MainFragment$e:
com.example.MainFragment$onActivityCreated$4 -> com.example.MainFragment$g:
    1:1:void com.example.MainFragment$Rocket.startEngines():90:90 -> onClick
    1:1:void com.example.MainFragment$Rocket.fly():83 -> onClick
    1:1:void onClick(android.view.View):65 -> onClick
    2:2:void com.example.MainFragment$Rocket.fly():85:85 -> onClick
    2:2:void onClick(android.view.View):65 -> onClick
    ";

        let stacktrace = "\
com.example.MainFragment$e: Crash!
    at com.example.MainFragment$g.onClick(SourceFile:2)
    at android.view.View.performClick(View.java:7393)
Caused by: com.example.MainFragment$d: Engines overheating
    at com.example.MainFragment$g.onClick(SourceFile:1)
    ... 13 more";

        let expect = "\
com.example.MainFragment$RocketException: Crash!
    at com.example.MainFragment$Rocket.fly(<unknown>:85)
    at com.example.MainFragment$onActivityCreated$4.onClick(SourceFile:65)
    at android.view.View.performClick(View.java:7393)
Caused by: com.example.MainFragment$EngineFailureException: Engines overheating
    at com.example.MainFragment$Rocket.startEngines(<unknown>:90)
    at com.example.MainFragment$Rocket.fly(<unknown>:83)
    at com.example.MainFragment$onActivityCreated$4.onClick(SourceFile:65)
    ... 13 more\n";

        let mapping = ProguardMapping::new(mapping.as_bytes());
        let mut cache = Vec::new();
        ProguardCache::write(&mapping, &mut cache).unwrap();

        let cache = ProguardCache::parse(&cache).unwrap();

        cache.test();

        assert_eq!(cache.remap_stacktrace(stacktrace).unwrap(), expect);
    }
}
